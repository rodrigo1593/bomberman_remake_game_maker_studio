<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

rate = 8; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// axis controls

if (instance_exists(obj_analog_stick)) {
    // magnitude, ranging from -1 to 1
    var mag = scr_get_analog_stick_axis(obj_analog_stick,axis.X); 
    
    // flip sprite 
    if (mag &lt; 0) { 
        image_xscale = -1; 
    }
    else if (mag &gt; 0) { 
        image_xscale = 1; 
    }
    
    // multiply rate (8 px) by mag percentage, then add to x
    x += mag*rate; 
}
else { 
    // accelerometer controls
    
    // vars 
    var xvector = rate; 
    var tiltDeadZone = 0.17; // range of 0 to 1; when on table, value fluctuates around 0.04
    var speedFactor = 1/0.45; //0.45 means phone is tilted about 42 degrees
    
    // magnitude, ranging from -1 to 1
    var mag = scr_get_tilt_speed(xvector,speedFactor,tiltDeadZone); 
    
    // flip sprite 
    if (mag &lt; 0) { 
        image_xscale = -1; 
    }
    else if (mag &gt; 0) { 
        image_xscale = 1; 
    }
    
    // multiply rate (8 px) by mag percentage, then add to x
    x += mag;
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// keyboard movement (triggered by virtual keys)

if (keyboard_check(vk_left)) { 
    if (place_free(x-rate,y)) { 
        x -= rate; 
    }
    image_xscale = -1;
}
if (keyboard_check(vk_right)) { 
    if (place_free(x+rate,y)) { 
        x += rate; 
    }
    image_xscale = 1; 
}
if (keyboard_check(vk_up)) { 
    if (place_free(x,y-rate)) { 
        y -= rate; 
    }
}
if (keyboard_check(vk_down)) { 
    if (place_free(x,y+rate)) { 
        y += rate; 
    }
}

// limit to room constraints 
if (x &lt; 0) { 
    x = 0; 
}
if (x+sprite_width/2 &gt; room_width) { 
    x = room_width-sprite_width/2; 
}
if (y &lt; 0) { 
    y = 0; 
}
if (y+sprite_height/2 &gt; room_height) { 
    y = room_height-sprite_height/2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
